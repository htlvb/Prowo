@page "/projects/new"
@page "/projects/edit/{ProjectId}"

@using Microsoft.Extensions.Configuration
@using Microsoft.Identity.Web
@using Prowo.Web.Data
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Globalization

@inject NavigationManager NavigationManager
@inject UserStore UserStore
@inject ProjectStore ProjectStore

@if (ProjectId == null)
{
    <h2 class="text-2xl">Projekt anlegen</h2>
}
else
{
    <h2 class="text-2xl">Projekt bearbeiten</h2>
}

<AuthorizeView Policy="EditProject" Resource=@this>
    <EditForm Context="Edit" Model=@EditingProject OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator/>

        <div class="input">
            <label class="block">
                <span class="input-label">Titel</span> 
                <InputText @bind-Value=EditingProject.Title class="input-text" />
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Beschreibung</span> 
                <InputTextArea @bind-Value=EditingProject.Description class="input-text" rows="5" cols="70" />
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Ort</span> 
                <InputText @bind-Value=EditingProject.Location class="input-text" />
            </label>
        </div>
    
        <div class="input">
            <label class="block">
                <span class="input-label">Organisator</span>
                <AuthorizeView Context="Auth" Roles="Project.Write.Alll" >
                    <Authorized>
                        <InputSelect @bind-Value=EditingProject.OrganizerId class="input-select">
                        @if (organizerCandidates == null)
                        {
                            <option value="">Personen werden geladen...</option>
                        }
                        else
                        {
                            @foreach (var person in organizerCandidates)
                            {
                                <option value=@person.Id>@person.DisplayName</option>
                            }
                        }
                        </InputSelect>
                    </Authorized>
                    <NotAuthorized>
                        @organizerCandidates?.FirstOrDefault(v => v.Id == EditingProject.OrganizerId)?.DisplayName
                    </NotAuthorized>
                </AuthorizeView>
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Betreuer</span>
                <InputSelect @bind-Value=EditingProject.CoOrganizerIds class="input-select">
                @if (organizerCandidates == null)
                {
                    <option value="">Personen werden geladen...</option>
                }
                else
                {
                    @foreach (var person in organizerCandidates)
                    {
                        <option value=@person.Id>@person.DisplayName</option>
                    }
                }
                </InputSelect>
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Maximale Teilnehmerzahl</span>
                <InputNumber @bind-Value=EditingProject.MaxAttendees ParsingErrorMessage="Keine gültige Teilnehmerzahl." class="input-text" />
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Datum</span>
                <InputDate @bind-Value=EditingProject.Date ParsingErrorMessage="Kein gültiges Datum." class="input-text" />
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Von</span>
                <input type="time" @bind=EditingProject.StartTime ParsingErrorMessage="Keine gültige Startzeit." class="input-text" />
            </label>
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">
                    <InputCheckbox @bind-Value=EditingProject.HasEndTime /> Bis
                </span>
            </label>
            <input type="time" @bind=EditingProject.EndTime ParsingErrorMessage="Keine gültige Endzeit" disabled=@(!EditingProject.HasEndTime) class="input-text" />
        </div>

        <div class="input">
            <label class="block">
                <span class="input-label">Anmeldeschluss</span>
                <InputDate @bind-Value=EditingProject.ClosingDate ParsingErrorMessage="Kein gültiger Anmeldeschluss." class="input-text" />
            </label>
        </div>

        <ValidationSummary />

        <div class="input">
            <input type="submit" value=@(ProjectId == null ? "Projekt anlegen" : "Projekt aktualisieren") class="btn btn-green"/>
            @if (errorMessage != null)
            {
                <span class="inline-block ml-2 text-red-500">@errorMessage</span>
            }
        </div>
    </EditForm>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    public UIProject EditingProject { get; private set; } = new();
    private List<OrganizerCandidate> organizerCandidates;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;

        try
        {
            organizerCandidates = await UserStore.GetOrganizerCandidates().ToList();

            if (ProjectId != null)
            {
                var project = await ProjectStore.Get(ProjectId);
                EditingProject = UIProject.FromProject(project);
            }
            else
            {
                EditingProject.OrganizerId = authState.User.GetObjectId();
            }
        }
        catch (LoginRequiredException)
        {
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        errorMessage = null;
        try
        {
            var project = EditingProject.ToProject(ProjectId);
            if (ProjectId == null)
            {
                await ProjectStore.CreateProject(project);
            }
            else
            {
                await ProjectStore.UpdateProject(project);
            }
            NavigationManager.NavigateTo("/projects");
        }
        catch
        {
            errorMessage = "Projekt konnte nicht gespeichert werden.";
        }
    }

    public class UIProject
    {
        [Required(ErrorMessage = "Titel darf nicht leer sein.")]
        public string Title { get; set; }
        [Required(ErrorMessage = "Beschreibung darf nicht leer sein.")]
        public string Description { get; set; }
        [Required(ErrorMessage = "Ort darf nicht leer sein.")]
        public string Location { get; set; }
        [Required(ErrorMessage = "Organisator muss ausgewählt werden.")]
        public string OrganizerId { get; set; }
        public string[] CoOrganizerIds { get; set; } = Array.Empty<string>();
        public DateTime Date { get; set; } = DateTime.Today;
        public DateTime StartTime { get; set; } = DateTime.Today.AddHours(9);
        public bool HasEndTime { get; set; } = true;
        public DateTime EndTime { get; set; } = DateTime.Today.AddHours(13);
        public DateTime ClosingDate { get; set; } = DateTime.Today;
        [Range(1, int.MaxValue, ErrorMessage = "Maximale Anzahl an Teilnehmer muss mindestens 1 sein.")]
        public int MaxAttendees { get; set; } = 20;

        public static UIProject FromProject(Project project)
        {
            return new UIProject
            {
                Title = project.Title,
                Description = project.Description,
                Location = project.Location,
                OrganizerId = project.OrganizerId,
                CoOrganizerIds = project.CoOrganizerIds.ToArray(),
                Date = project.Date.ToDateTime(TimeOnly.MinValue),
                StartTime = project.Date.ToDateTime(project.StartTime),
                HasEndTime = project.EndTime != null,
                EndTime = project.Date.ToDateTime(project.EndTime == null ? TimeOnly.MinValue : project.EndTime.Value),
                ClosingDate = project.ClosingDate,
                MaxAttendees = project.MaxAttendees
            };
        }

        public Project ToProject(string? projectId)
        {
            return new Project
            (
                projectId ?? Guid.NewGuid().ToString(),
                Title,
                Description,
                Location,
                OrganizerId,
                CoOrganizerIds,
                DateOnly.FromDateTime(Date),
                TimeOnly.FromDateTime(StartTime),
                (HasEndTime ? TimeOnly.FromDateTime(EndTime) : null),
                ClosingDate,
                MaxAttendees,
                Array.Empty<ProjectAttendee>()
            );
        }
    }
}
