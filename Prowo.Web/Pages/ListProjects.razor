@page "/projects"

@using Microsoft.Identity.Web
@using Prowo.Web.Data
@using System.Globalization

@inject ProjectStore ProjectStore
@inject UserStore UserStore

<div class="flex align-center mb-4">
    <h2 class="text-2xl">Projekte</h2>
    <div class="grow flex justify-end">
        @if (projects != null && projects.Count > 0)
        {
            <AuthorizeView Roles="Report.Create">
                <NavLink class="btn btn-blue" href="all-attendees">Alle Anmeldungen anzeigen</NavLink>
            </AuthorizeView>
        }
    </div>
</div>
<div class="flex flex-col gap-4">
    <AuthorizeView Roles="Project.Write">
        <NavLink class="border-l-2 border-gray-400 hover:border-blue-500 rounded shadow p-2" href="projects/new">
            <span class="text-4xl text-black align-middle">+</span>
            <span class="text-xl text-black align-middle">Neues Projekt anlegen</span>
        </NavLink>
    </AuthorizeView>
    @if (projects == null)
    {
        <p><em>Projekte werden geladen...</em></p>
    }
    else if (projects.Count == 0)
    {
        <p>Keine Projekte vorhanden.</p>
    }
    else
    {
        foreach (var project in projects)
        {
            var currentUserRegistrationStatus = GetCurrentUserRegistrationStatus(project);

            <div class="border-l-2 border-gray-400 hover:border-blue-500 rounded shadow">
                <div class="flex flex-col divide-y md:divide-y-0 divide-x-0 md:divide-x md:flex-row">
                    <div class="flex flex-col p-2 min-w-max">
                        <span class="text-xl text-black">@project.Title</span>
                        <span class="text-sm text-gray-600">@project.OrganizerName</span>
                        <span class="text-sm text-gray-600">@project.Date.ToLongDateString() | @project.StartTime @if (project.EndTime.HasValue) { <span> - @project.EndTime</span> }</span>
                        @{
                            var localClosingDate = @project.ClosingDate.ToUserTime();
                            var diff = localClosingDate - DateTime.Now;
                            string closingDateClassNames;
                            if (diff > TimeSpan.FromDays(1))
                            {
                                closingDateClassNames = "text-green-600";
                            }
                            else if (diff > TimeSpan.Zero)
                            {
                                closingDateClassNames = "text-yellow-500";
                            }
                            else
                            {
                                closingDateClassNames = "text-red-500";
                            }
                        }
                        <span class="text-sm text-gray-600">
                            Anmeldeschluss:
                            <span class="@closingDateClassNames">@localClosingDate.ToLongDateString() @localClosingDate.ToLongTimeString()</span>
                        </span>
                        @{
                            double workload = (double)project.AttendeeIds.Count / project.MaxAttendees;
                            string workloadClassNames;
                            if (workload < 0.8)
                            {
                                workloadClassNames = "bg-green-500 text-white";
                            }
                            else if (workload < 1)
                            {
                                workloadClassNames = "bg-yellow-500";
                            }
                            else
                            {
                                workloadClassNames = "bg-red-500 text-white";
                            }
                        }
                        <div class="flex items-center gap-2">
                            <span class="text-sm p-2 rounded @workloadClassNames">@project.AttendeeIds.Count / @project.MaxAttendees</span>
                            @if (currentUserRegistrationStatus == RegistrationStatus.Registered)
                            {
                                <span class="text-sm text-green-500">Du bist angemeldet.</span>
                            }
                            else if (currentUserRegistrationStatus == RegistrationStatus.Waiting)
                            {
                                <span class="text-sm text-yellow-500">Du bist auf der Warteliste.</span>
                            }
                        </div>
                    </div>
                    <div class="min-w-0 p-2">
                        <span class="text-sm whitespace-pre-wrap">
                            @project.Description
                        </span>
                    </div>
                    <div class="flex flex-col gap-2 p-2">
                        <AuthorizeView Policy="EditProject" Resource=@project>
                            <a class="btn btn-blue" href=@($"/projects/edit/{project.Id}")>Bearbeiten</a>
                        </AuthorizeView>
                        <AuthorizeView Roles="Report.Create">
                            <a class="btn btn-blue" href=@($"/projects/attendees/{project.Id}")>Anmeldungen anzeigen</a>
                        </AuthorizeView>
                        <AuthorizeView Roles="Project.Attend">
                            @{
                                var registrationDisabled = project.ClosingDate <= DateTime.UtcNow;
                            }
                            @if (currentUserRegistrationStatus == RegistrationStatus.Registered || currentUserRegistrationStatus == RegistrationStatus.Waiting)
                            {
                                <button class="btn btn-red" disabled=@registrationDisabled onclick=@(() => DeregisterCurrentUserFromProject(project))>Abmelden</button>
                            }
                            else if (currentUserRegistrationStatus == RegistrationStatus.NotRegistered)
                            {
                                <button class="btn btn-green" disabled=@registrationDisabled onclick=@(() => RegisterCurrentUserForProject(project))>Anmelden</button>
                            }
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<UIProject> projects;
    private string currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        currentUserId = authState.User.GetObjectId();

        try
        {
            var users = await UserStore.GetOrganizerCandidates().ToList();
            var userLookup = users.ToDictionary(v => v.Id);
            projects = await ProjectStore.GetAll()
                .Select(v => UIProject.FromProject(v, userLookup))
                .ToList();
        }
        catch (LoginRequiredException)
        {
        }
    }

    private async Task RegisterCurrentUserForProject(UIProject project)
    {
        var attendee = await UserStore.GetSelfAsProjectAttendee();
        var dbProject = await ProjectStore.AddAttendee(project.Id, attendee);
        project.AttendeeIds = dbProject.CalculateActualAttendees().Select(v => v.UserId).ToList();
        this.StateHasChanged();
    }

    private async Task DeregisterCurrentUserFromProject(UIProject project)
    {
        var authState = await AuthenticationStateTask;
        var userId = authState.User.GetObjectId();
        var dbProject = await ProjectStore.RemoveAttendee(project.Id, userId);
        project.AttendeeIds = dbProject.CalculateActualAttendees().Select(v => v.UserId).ToList();
        this.StateHasChanged();
    }

    private RegistrationStatus GetCurrentUserRegistrationStatus(UIProject project)
    {
        var currentUserIndex = project.AttendeeIds.IndexOf(currentUserId);
        if (currentUserIndex == -1)
        {
            return RegistrationStatus.NotRegistered;
        }
        else if (currentUserIndex >= project.MaxAttendees)
        {
            return RegistrationStatus.Waiting;
        }
        return RegistrationStatus.Registered;
    }

    public record UIProject(
        string Id,
        string Title,
        string Description,
        string OrganizerId,
        string OrganizerName,
        DateOnly Date,
        TimeOnly StartTime,
        TimeOnly? EndTime,
        DateTime ClosingDate,
        int MaxAttendees,
        List<string> AttendeeIds
    )
    {
        public List<string> AttendeeIds { get; set; } = AttendeeIds;

        public static UIProject FromProject(
            Project project,
            IReadOnlyDictionary<string, OrganizerCandidate> users)
        {
            return new(
                project.Id,
                project.Title,
                project.Description,
                project.OrganizerId,
                users.TryGetValue(project.OrganizerId, out var organizer) ? organizer.DisplayName : "",
                project.Date,
                project.StartTime,
                project.EndTime,
                project.ClosingDate,
                project.MaxAttendees,
                project.Attendees.Select(v => v.UserId).ToList()
            );
        }
    }

    public enum RegistrationStatus
    {
        NotRegistered,
        Registered,
        Waiting
    }
}