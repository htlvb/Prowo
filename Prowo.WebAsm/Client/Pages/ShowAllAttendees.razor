@page "/projects/all-attendees"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.RegularExpressions
@using System.Text.Json

@inject HttpClient Http

<PageTitle>Projektanmeldungen - HTLVB Prowo</PageTitle>

<h2 class="text-2xl pb-2 print:hidden">Projektanmeldungen</h2>
@if (attendanceOverview == null)
{
    <p><em>Anmeldungen werden geladen...</em></p>
}
else
{
    <div class="flex flex-col gap-2 pb-2 print:hidden">
    @foreach (var department in attendanceOverview.Groups.GroupBy(v => Regex.Replace(v.Name, @"\D*$", "")))
    {
        <div class="flex gap-4">
            @foreach (var @group in department)
            {
                <button class="btn btn-blue@(group == selectedGroup ? "-selected" : "")" onclick=@(() => SelectGroup(@group))>@group.Name</button>
            }
        </div>
    }
    </div>

    var displayGroups = selectedGroup == null ? attendanceOverview.Groups : new[] { selectedGroup };
    foreach (var group in displayGroups)
    {
        <div class="break-after-page">
            <h3 class="text-xl pb-2 print:hidden">@group.Name</h3>
            <table class="table-striped min-w-full mb-4">
                <thead>
                    <tr class="hidden print:table-row">
                        <th colspan="@(attendanceOverview.Dates.Count + 2)">Projektanmeldungen @group.Name</th>
                    </tr>
                    <tr>
                        <th>Nachname</th>
                        <th>Vorname</th>
                        @foreach (var date in attendanceOverview.Dates)
                        {
                            <th>@date.ToLongDateString()</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var student in group.Students)
                    {
                        <tr>
                            <td>@student.LastName</td>
                            <td>@student.FirstName</td>
                            @foreach (var projects in student.Projects)
                            {
                                <td>
                                    <div class="flex flex-col gap-2 items-start">
                                        @foreach (var project in projects.List)
                                        {
                                            var background = project.IsWaiting ? "bg-yellow-400" : "bg-green-400";
                                            var deletionState = registrationDeletionState.TryGetValue(project, out var s) ? s : new Nullable<DeregisterUserButton.State>();
                                            var isRegistrationDeleting = deletionState.HasValue && deletionState.Value == DeregisterUserButton.State.Executing;
                                            var isRegistrationDeleted = deletionState.HasValue && deletionState.Value == DeregisterUserButton.State.Executed;
                                            var opacityStyle = isRegistrationDeleting || isRegistrationDeleted ? "opacity-50" : "";
                                            <div class="flex items-stretch">
                                                <div class="px-4 py-2 rounded-l last:rounded-r @background @opacityStyle">
                                                    @if (project.ShowProjectAttendeesLink != null)
                                                    {
                                                        <a class="link" href="@project.ShowProjectAttendeesLink">@project.LongName</a>
                                                    }
                                                    else
                                                    {
                                                        <span>@project.LongName</span>
                                                    }
                                                </div>
                                                <DeregisterUserButton
                                                    RegistrationLink="@project.UserRegistrationLink"
                                                    OnStateChanged="@(state => ChangeRegistrationState(project, state))"
                                                    ProjectName="@project.Name"
                                                    StudentMailAddress="@student.MailAddress" />
                                            </div>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private AttendanceOverviewDto? attendanceOverview;
    private GroupDto? selectedGroup;

    private Dictionary<StudentProjectDto, DeregisterUserButton.State> registrationDeletionState = new();

    private JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web) { Converters = { new DateOnlyJsonConverter(), new TimeOnlyJsonConverter() } };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            attendanceOverview = await Http.GetFromJsonAsync<AttendanceOverviewDto>("/api/projects/attendees", serializerOptions);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        selectedGroup = null;
    }

    private void SelectGroup(GroupDto group)
    {
        selectedGroup = ReferenceEquals(selectedGroup, group) ? null : group;
        StateHasChanged();
    }

    private void ChangeRegistrationState(StudentProjectDto project, DeregisterUserButton.State state)
    {
        registrationDeletionState[project] = state;
        StateHasChanged();
    }
}
