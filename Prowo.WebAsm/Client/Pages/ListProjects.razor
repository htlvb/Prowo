@page "/projects"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json

@attribute [Authorize]

@inject HttpClient Http

<PageTitle>Projekte - HTLVB Prowo</PageTitle>

<div class="flex align-center mb-4">
    <h2 class="text-2xl">Projekte</h2>
    <div class="grow flex justify-end">
        @if (projectList != null && projectList.Links.ShowAllAttendees != null)
        {
            <NavLink class="btn btn-blue" href=@projectList.Links.ShowAllAttendees>Alle Anmeldungen anzeigen</NavLink>
        }
    </div>
</div>
<div class="flex flex-col gap-4">
    @if (projectList != null && projectList.Links.CreateProject != null)
    {
        <NavLink class="border-l-2 border-gray-400 hover:border-blue-500 rounded shadow hover:shadow-blue-500 p-2" href=@projectList.Links.CreateProject>
            <span class="text-4xl text-black align-middle">+</span>
            <span class="text-xl text-black align-middle">Neues Projekt anlegen</span>
        </NavLink>
    }

    @if (projectList == null)
    {
        <p><em>Projekte werden geladen...</em></p>
    }
    else if (projectList.Projects.Count == 0)
    {
        <p>Keine Projekte vorhanden.</p>
    }
    else
    {
        IEnumerable<ProjectDto> filteredProjects = projectList.Projects;
        filteredProjects = selectedDate == null ? filteredProjects : filteredProjects.Where(v => v.Date == selectedDate);
        filteredProjects = showOnlyUserProjects ? filteredProjects.Where(v => v.IsUserProject) : filteredProjects;
        List<ProjectDto> filteredProjectList = filteredProjects.ToList();

        <div class="flex flex-col gap-2 border-gray-400 rounded shadow p-2">
            @if (dates != null && dates.Count > 1)
            {
                <div class="flex flex-col md:flex-row gap-2">
                    <span class="md:self-center">Projekte nur von folgendem Tag anzeigen:</span>
                    @foreach (var date in dates)
                    {
                        <button class="btn btn-blue@(selectedDate == date ? "-selected" : "")" onclick=@(() => SelectDate(date))>@date.ToLongDateString()</button>
                    }
                </div>
            }

            <div>
                <label class="inline-flex items-center relative gap-2">
                    <input type="checkbox" class="absolute left-1/2 -translate-x-1/2 w-full h-full peer appearance-none rounded-md" onchange=@((ChangeEventArgs e) => FilterUserProjects((bool)e.Value!)) />
                    <span class="w-12 h-6 flex items-center flex-shrink-0 p-1 bg-gray-300 rounded-full duration-300 ease-in-out peer-checked:bg-green-400 after:w-5 after:h-5 after:bg-white after:rounded-full after:shadow-md after:duration-300 peer-checked:after:translate-x-5"></span>
                    Nur meine Projekte anzeigen
                </label>
            </div>

            <div class="flex flex-row flex-wrap gap-2 mt-2">
                @{
                    var projectCountText = filteredProjectList.Count == 1 ? "1 Projekt" : $"{filteredProjectList.Count} Projekte";

                    var totalAvailableSlots = filteredProjectList.Sum(v => v.MaxAttendees);
                    var totalAvailableSlotsText = totalAvailableSlots == 1 ? "1 verfügbarer Platz" : $"{totalAvailableSlots} verfügbare Plätze";
                    
                    var totalRegistrations = filteredProjectList.Sum(v => Math.Min(v.Attendees, v.MaxAttendees));
                    var totalRegistrationsText = totalRegistrations == 1 ? "1 Anmeldung mit Fixplatz" : $"{totalRegistrations} Anmeldungen mit Fixplatz";

                    var freeSlots = totalAvailableSlots - totalRegistrations;
                    var freeSlotsText = freeSlots == 1 ? "1 freier Platz" : $"{freeSlots} freie Plätze";

                    var totalWaitingCount = filteredProjectList.Sum(v => Math.Max(0, v.Attendees - v.MaxAttendees));
                    var totalWaitingCountText = totalWaitingCount == 1 ? "1 Person auf der Warteliste" : $"{totalWaitingCount} Personen auf der Warteliste";
                }
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@projectCountText</div>
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@totalAvailableSlotsText</div>
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@totalRegistrationsText</div>
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@freeSlotsText</div>
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@totalWaitingCountText</div>
            </div>
        </div>

        @foreach (var project in filteredProjectList)
        {
            <ProjectListItem @key=project Project="@project" OnUpdate="UpdateProject" OnDelete="@(() => RemoveProject(project))" />
        }
    }
</div>

@code {
    private readonly JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web) { Converters = { new DateOnlyJsonConverter(), new TimeOnlyJsonConverter() } };
    private ProjectListDto? projectList;
    private IReadOnlyList<DateOnly>? dates;
    private DateOnly? selectedDate;
    private bool showOnlyUserProjects = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projectList = (await Http.GetFromJsonAsync<ProjectListDto>("api/projects", serializerOptions))!;
            dates = projectList.Projects.Select(v => v.Date).Distinct().OrderBy(v => v).ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void SelectDate(DateOnly date)
    {
        selectedDate = selectedDate == date ? null : date;
        StateHasChanged();
    }

    private void FilterUserProjects(bool showOnlyUserProjects)
    {
        this.showOnlyUserProjects = showOnlyUserProjects;
        StateHasChanged();
    }

    private void UpdateProject(ProjectDto oldProject, ProjectDto newProject)
    {
        projectList = projectList! with { Projects = projectList.Projects.Select(p => ReferenceEquals(p, oldProject) ? newProject : p).ToList() };
        StateHasChanged();
    }

    private void RemoveProject(ProjectDto project)
    {
        projectList = projectList! with { Projects = projectList.Projects.Except(new[] { project }).ToList() };
        StateHasChanged();
    }
}