@page "/projects/attendees/{ProjectId}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json

@inject HttpClient Http

<PageTitle>Teilnehmerliste - HTLVB Prowo</PageTitle>

@if (project == null)
{
    <h2 class="text-2xl">Teilnehmerliste</h2>
    <p><em>Projekt wird geladen...</em></p>
}
else
{
    <h2 class="text-2xl pb-2">Teilnehmerliste "@project.Title"</h2>
    <span class="inline-block pb-4 text-sm text-gray-600">@project.Date.ToLongDateString(), @project.StartTime @if (project.EndTime.HasValue) { <text> - @project.EndTime</text> }</span>

    @if (project.Attendees.Count == 0)
    {
        <h3 class="text-lg">Keine Teilnehmer angemeldet.</h3>
    }
    else
    {
        <div class="flex flex-col gap-2 print:hidden">
            @{
                string allMailAddresses = string.Join(";", project.Attendees.Select(v => v.MailAddress));
                string registeredAddresses = string.Join(";", project.Attendees.Where(v => !v.IsWaiting).Select(v => v.MailAddress));
                string waitingAddresses = string.Join(";", project.Attendees.Where(v => v.IsWaiting).Select(v => v.MailAddress));
                string subject = $"{project.Title} am {project.Date.ToShortDateString()}";
                string encodedSubject = Uri.EscapeDataString(subject);
            }
            <div><a class="link" href="mailto:@allMailAddresses?subject=@encodedSubject">E-Mail an alle schicken</a></div>
            <div><a class="link" href="mailto:@registeredAddresses?subject=@encodedSubject">E-Mail an Anmeldungen mit Fixplatz schicken</a></div>
            <div><a class="link" href="mailto:@waitingAddresses?subject=@encodedSubject">E-Mail an Anmeldungen auf Warteliste schicken</a></div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Nummer</th>
                    <th>Klasse</th>
                    <th>Nachname</th>
                    <th>Vorname</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (attendee, number) in project.Attendees.Select((v, i) => (v, i + 1)))
                {
                    <tr class="@(attendee.IsWaiting ? "bg-yellow-400" : "bg-green-400")">
                        <td>@number</td>
                        <td>@attendee.Class</td>
                        <td>@attendee.LastName</td>
                        <td>@attendee.FirstName</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public string? ProjectId { get; set; }

    private ProjectAttendeesDto? project;

    private JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web) { Converters = { new DateOnlyJsonConverter(), new TimeOnlyJsonConverter() } };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            project = await Http.GetFromJsonAsync<ProjectAttendeesDto>($"/api/projects/{ProjectId}/attendees", serializerOptions);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
