@using System.Text.Json;
@using Markdig;
@using Markdig.Extensions.AutoLinks;
@inject HttpClient Http

@if (Project != null)
{
    <div class="project border-l-2 border-gray-400 hover:border-blue-500 rounded shadow hover:shadow-blue-500">
        <div class="flex flex-col divide-y md:divide-y-0 divide-x-0 md:divide-x md:flex-row w-full">
            <div class="flex flex-col basis-1/5 shrink-0 p-2">
                <span class="text-xl text-black pb-2">@Project.Title</span>
                <span class="text-sm text-gray-600 pb-2">
                    <strong>@Project.Organizer.DisplayName</strong>
                    @foreach (var coOrganizer in Project.CoOrganizers)
                    {
                        <text>, @coOrganizer.DisplayName</text>
                    }
                </span>
                <span class="text-sm text-gray-600 pb-2">
                    @Project.Date.ToLongDateString() | @Project.StartTime @if (Project.EndTime.HasValue)
                    {
                        <text> - @Project.EndTime</text>
                    }
                </span>
                <span class="text-sm text-gray-600 pb-2">@Project.Location</span>
                @{
                    var diff = Project.ClosingDateLocalUserTime - DateTime.Now;
                    string closingDateClassNames;
                    if (diff > TimeSpan.FromDays(1))
                    {
                        closingDateClassNames = "text-green-600";
                    }
                    else if (diff > TimeSpan.Zero)
                    {
                        closingDateClassNames = "text-yellow-500";
                    }
                    else
                    {
                        closingDateClassNames = "text-red-500";
                    }
                }
                <span class="text-sm text-gray-600 pb-2">
                    Anmeldeschluss:
                    <span class="@closingDateClassNames">@Project.ClosingDateLocalUserTime.ToLongDateString() @Project.ClosingDateLocalUserTime.ToLongTimeString()</span>
                </span>
                @{
                    double workload = (double)Project.Attendees / Project.MaxAttendees;
                    string workloadClassNames;
                    if (workload < 0.8)
                    {
                        workloadClassNames = "bg-green-500 text-white";
                    }
                    else if (workload < 1)
                    {
                        workloadClassNames = "bg-yellow-500";
                    }
                    else
                    {
                        workloadClassNames = "bg-red-500 text-white";
                    }
                }
                <div class="grow flex items-end">
                    <div class="flex items-center gap-2">
                        <span class="text-sm p-2 rounded @workloadClassNames">@Project.Attendees / @Project.MaxAttendees</span>
                        @if (Project.CurrentUserStatus == UserRoleForProjectDto.Registered)
                        {
                            <span class="text-sm text-green-500">Du bist angemeldet.</span>
                        }
                        else if (Project.CurrentUserStatus == UserRoleForProjectDto.Waiting)
                        {
                            <span class="text-sm text-yellow-500">Du bist auf der Warteliste.</span>
                        }
                    </div>
                </div>
            </div>
            <div class="description p-2 grow">
                @ProjectDescription
            </div>
            <div class="flex flex-col basis-1/6 gap-2 p-2">
                @if (Project.Links.Edit != null)
                {
                    <NavLink class="btn btn-blue" href=@Project.Links.Edit>Bearbeiten</NavLink>
                }
                @if (Project.Links.Delete != null)
                {
                    if (deletionState == ConfirmableActionState.None)
                    {
                        <button class="btn btn-red" onclick=@(() => MarkForDeletion())>Löschen</button>
                    }
                    else if (deletionState == ConfirmableActionState.IsPreparedToExecute)
                    {
                        <button class="btn btn-red-filled" onclick=@(() => Delete())>Wirklich löschen</button>
                    }
                    else if (deletionState == ConfirmableActionState.IsExecuting)
                    {
                        <button class="btn btn-red-filled" disabled="true">
                            <span class="spinner spinner-white"></span>
                        </button>
                    }
                }
                @if (Project.Links.ShowAttendees != null)
                {
                    <NavLink class="btn btn-blue" href=@Project.Links.ShowAttendees>Anmeldungen anzeigen</NavLink>
                }
                @if (Project.Links.Register != null)
                {
                    if (registrationState == ConfirmableActionState.None)
                    {
                        <button class="btn btn-green" onclick=@(() => MarkForRegistration())>Anmelden</button>
                    }
                    else if (registrationState == ConfirmableActionState.IsPreparedToExecute)
                    {
                        <button class="btn btn-green-filled" onclick=@(() => RegisterCurrentUserForProject())>Verbindlich anmelden</button>
                    }
                    else if (registrationState == ConfirmableActionState.IsExecuting)
                    {
                        <button class="btn btn-green-filled" disabled="true">
                            <span class="spinner spinner-white"></span>
                        </button>
                    }
                }
                else if (Project.Links.Deregister != null)
                {
                    if (registrationState == ConfirmableActionState.None)
                    {
                        <button class="btn btn-red" onclick=@(() => MarkForDeregistration())>Abmelden</button>
                    }
                    else if (registrationState == ConfirmableActionState.IsPreparedToExecute)
                    {
                        <button class="btn btn-red-filled" onclick=@(() => DeregisterCurrentUserFromProject())>Wirklich abmelden</button>
                    }
                    else if (registrationState == ConfirmableActionState.IsExecuting)
                    {
                        <button class="btn btn-red-filled" disabled="true">
                            <span class="spinner spinner-white"></span>
                        </button>
                    }
                }
            </div>
        </div>
    </div>
}
@code {
    private readonly JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web) { Converters = { new DateOnlyJsonConverter(), new TimeOnlyJsonConverter() } };

    [Parameter]
    public ProjectDto? Project { get; set; }

    public MarkupString ProjectDescription
    {
        get
        {
            if (Project == null)
            {
                return default;
            }
            var markdownPipeline = new MarkdownPipelineBuilder()
                .DisableHtml()
                .UseAutoLinks(new AutoLinkOptions { OpenInNewWindow = true })
                .Build();
            return (MarkupString)Markdown.ToHtml(Project.Description, markdownPipeline);
        }
    }

    [Parameter]
    public Action<ProjectDto, ProjectDto>? OnUpdate { get; set; }

    [Parameter]
    public Action? OnDelete { get; set; }

    enum ConfirmableActionState
    {
        None,
        IsPreparedToExecute,
        IsExecuting
    }

    private ConfirmableActionState deletionState;

    private ConfirmableActionState registrationState;

    private void MarkForDeletion()
    {
        deletionState = ConfirmableActionState.IsPreparedToExecute;
        StateHasChanged();
    }

    private async Task Delete()
    {
        deletionState = ConfirmableActionState.IsExecuting;
        StateHasChanged();
        try
        {
            var response = await Http.DeleteAsync(Project!.Links.Delete);
            response.EnsureSuccessStatusCode();
            OnDelete?.Invoke();
        }
        finally
        {
            deletionState = ConfirmableActionState.None;
            StateHasChanged();
        }
    }

    private void MarkForRegistration()
    {
        registrationState = ConfirmableActionState.IsPreparedToExecute;
        StateHasChanged();
    }

    private async Task RegisterCurrentUserForProject()
    {
        registrationState = ConfirmableActionState.IsExecuting;
        StateHasChanged();
        try
        {
            var response = await Http.PostAsync(Project!.Links.Register, content: null);
            response.EnsureSuccessStatusCode();
            var updatedProject = (await response.Content.ReadFromJsonAsync<ProjectDto>(serializerOptions))!;
            OnUpdate?.Invoke(Project, updatedProject);
        }
        finally
        {
            registrationState = ConfirmableActionState.None;
            StateHasChanged();
        }
    }

    private void MarkForDeregistration()
    {
        registrationState = ConfirmableActionState.IsPreparedToExecute;
        StateHasChanged();
    }

    private async Task DeregisterCurrentUserFromProject()
    {
        registrationState = ConfirmableActionState.IsExecuting;
        StateHasChanged();
        try
        {
            var response = await Http.PostAsync(Project!.Links.Deregister, content: null);
            response.EnsureSuccessStatusCode();
            var updatedProject = (await response.Content.ReadFromJsonAsync<ProjectDto>(serializerOptions))!;
            OnUpdate?.Invoke(Project, updatedProject);
        }
        finally
        {
            registrationState = ConfirmableActionState.None;
            StateHasChanged();
        }
    }
}
