@page "/projects/new"
@page "/projects/edit/{ProjectId}"

@using Microsoft.Extensions.Configuration
@using Microsoft.Identity.Web
@using Prowo.BlazorServer.Data
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Globalization

@inject UserStore UserStore
@inject ProjectStore ProjectStore

@if (ProjectId == null)
{
    <h2 class="text-2xl">Projekt anlegen</h2>
}
else
{
    <h2 class="text-2xl">Projekt bearbeiten</h2>
}

<AuthorizeView Policy="EditProject" Resource=@this>
    <EditForm Context="Edit" Model=@EditingProject OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator/>

        <div class="form-group">
            <label for="title">Titel: </label>
            <InputText @bind-Value=EditingProject.Title id="title" />
        </div>

        <div class="form-group">
            <label for="description">Beschreibung: </label>
            <InputTextArea @bind-Value=EditingProject.Description id="description" />
        </div>

        <div class="form-group">
            <label for="location">Ort: </label>
            <InputText @bind-Value=EditingProject.Location id="location" />
        </div>
    
        <AuthorizeView Context="Auth" Roles="Project.Write.All" >
            <Authorized>
                <div class="form-group">
                    <label for="organizer-id">Organisator: </label>
                    <InputSelect @bind-Value=EditingProject.OrganizerId id="organizer-id">
                    @if (organizerCandidates == null)
                    {
                        <option value="">Personen werden geladen...</option>
                    }
                    else
                    {
                        @foreach (var person in organizerCandidates)
                        {
                            <option value=@person.Id>@person.DisplayName</option>
                        }
                    }
                    </InputSelect>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="form-group">
                    Organisator: @organizerCandidates?.FirstOrDefault(v => v.Id == EditingProject.OrganizerId)?.DisplayName
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <div class="form-group">
            <label for="co-organizer-ids">Betreuer: </label>
            <InputSelect @bind-Value=EditingProject.CoOrganizerIds id="co-organizer-ids">
            @if (organizerCandidates == null)
            {
                <option value="">Personen werden geladen...</option>
            }
            else
            {
                @foreach (var person in organizerCandidates)
                {
                    <option value=@person.Id>@person.DisplayName</option>
                }
            }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="max-attendees">Maximale Anzahl der Teilnehmer: </label>
            <InputNumber @bind-Value=EditingProject.MaxAttendees ParsingErrorMessage="Keine gültige Zahl" id="max-attendees" />
        </div>

        <div class="form-group">
            <label for="date">Datum: </label>
            <InputDate @bind-Value=EditingProject.Date ParsingErrorMessage="Kein gültiges Datum" id="date" />
        </div>

        <div class="form-group">
            <label for="start-time">Von: </label>
            <input type="time" @bind=EditingProject.StartTime ParsingErrorMessage="Keine gültige Startzeit" id="start-time" />
        </div>

        <div class="form-group">
            <InputCheckbox @bind-Value=EditingProject.HasEndTime id="has-end-time" />
            <label for="has-end-time">Bis: </label>
            <input type="time" @bind=EditingProject.EndTime ParsingErrorMessage="Keine gültige Endzeit" disabled=@(!EditingProject.HasEndTime) />
        </div>

        <ValidationSummary />

        @{
            var submitText = ProjectId == null ? "Projekt anlegen" : "Projekt aktualisieren";
        }
        <input type="submit" value=@submitText class="btn btn-primary"/>
    </EditForm>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    public Project EditingProject { get; private set; } = new();
    private List<DbUser> organizerCandidates;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;

        try
        {
            organizerCandidates = await UserStore.GetOrganizerCandidates().ToList();

            if(ProjectId != null)
            {
                var dbProject = await ProjectStore.Get(ProjectId);
                EditingProject = Project.FromDbProject(dbProject);
            }
            else
            {
                EditingProject.OrganizerId = authState.User.GetObjectId();
            }
        }
        catch (LoginRequiredException)
        {
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        var dbProject = EditingProject.ToDbProject(ProjectId);
        if (ProjectId == null)
        {
            await ProjectStore.CreateProject(dbProject);
        }
        else
        {
            await ProjectStore.UpdateProject(dbProject);
        }
        // TODO show success/error message, navigate to overview
    }

    public class Project
    {
        [Required]
        public string Title { get; set; }
        public string Description { get; set; }
        [Required]
        public string Location { get; set; }
        [Required]
        public string OrganizerId { get; set; }
        public string[] CoOrganizerIds { get; set; } = Array.Empty<string>();
        public DateTime Date { get; set; } = DateTime.Today;
        public DateTime StartTime { get; set; } = DateTime.Today.AddHours(9);
        public bool HasEndTime { get; set; } = true;
        public DateTime EndTime { get; set; } = DateTime.Today.AddHours(13);
        [Range(1, int.MaxValue, ErrorMessage = "Maximale Anzahl an Teilnehmer muss mindestens 1 sein.")]
        public int MaxAttendees { get; set; } = 20;

        public static Project FromDbProject(DbProject dbProject)
        {
            var date = DateTime.ParseExact(dbProject.Date, "d", CultureInfo.InvariantCulture);
            return new Project
            {
                Title = dbProject.Title,
                Description = dbProject.Description,
                Location = dbProject.Location,
                OrganizerId = dbProject.OrganizerId,
                CoOrganizerIds = dbProject.CoOrganizerIds,
                Date = date,
                StartTime = date.Add(TimeSpan.ParseExact(dbProject.StartTime, "hh\\:mm", CultureInfo.InvariantCulture)),
                HasEndTime = dbProject.EndTime != null,
                EndTime = dbProject.EndTime == null ? date : date.Add(TimeSpan.ParseExact(dbProject.EndTime, "hh\\:mm", CultureInfo.InvariantCulture)),
                MaxAttendees = dbProject.MaxAttendees
            };
        }

        public DbProject ToDbProject(string? projectId)
        {
            return new DbProject
            {
                Id = projectId ?? Guid.NewGuid().ToString(),
                Title = Title,
                Description = Description,
                Location = Location,
                OrganizerId = OrganizerId,
                CoOrganizerIds = CoOrganizerIds,
                Date = Date.ToString("d", CultureInfo.InvariantCulture),
                StartTime = StartTime.ToString("HH:mm", CultureInfo.InvariantCulture),
                EndTime = (HasEndTime ? EndTime.ToString("HH:mm", CultureInfo.InvariantCulture) : null),
                MaxAttendees = MaxAttendees,
                RegistrationEvents = Array.Empty<DbProject.RegistrationEvent>()
            };
        }
    }
}
