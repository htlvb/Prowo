@page "/projects/edit/{projectId?}"

@using Microsoft.Azure.Cosmos
@using Microsoft.Extensions.Configuration
@using Microsoft.Graph
@using Microsoft.Identity.Web
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization

@inject IConfiguration Configuration
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject CosmosClient CosmosClient

<h2>Projekt bearbeiten</h2>

<EditForm Model=@EditingProject OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="title">Titel: </label>
        <InputText @bind-Value=EditingProject.Title id="title" />
    </div>

    <div class="form-group">
        <label for="description">Beschreibung: </label>
        <InputTextArea @bind-Value=EditingProject.Description id="description" />
    </div>

    <div class="form-group">
        <label for="location">Ort: </label>
        <InputText @bind-Value=EditingProject.Location id="location" />
    </div>
    
    <div class="form-group">
        <label for="organizer-id">Organisator: </label>
        <InputSelect @bind-Value=EditingProject.OrganizerId id="organizer-id">
        @if (OrganizerCandidates == null)
        {
            <option value="">Personen werden geladen...</option>
        }
        else
        {
            @foreach (var person in OrganizerCandidates)
            {
                <option value=@person.UserPrincipalName>@person.DisplayName</option>
            }
        }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="max-participants">Maximale Anzahl der Teilnehmer: </label>
        <InputNumber @bind-Value=EditingProject.MaxParticipants ParsingErrorMessage="Keine gültige Zahl" id="max-participants" />
    </div>

    <div class="form-group">
        <label for="date">Datum: </label>
        <InputDate @bind-Value=EditingProject.Date ParsingErrorMessage="Kein gültiges Datum" id="date" />
    </div>

    <div class="form-group">
        <label for="start-time">Von: </label>
        <input type="time" @bind=EditingProject.StartTime ParsingErrorMessage="Keine gültige Startzeit" id="start-time" />
    </div>

    <div class="form-group">
        <label for="end-time">Bis: </label>
        <input type="time" @bind=EditingProject.EndTime ParsingErrorMessage="Keine gültige Endzeit" id="end-time" />
    </div>

    <ValidationSummary />

    <input type="submit" value="Projekt anlegen" class="btn btn-primary"/>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    Project EditingProject = new();

    List<AadUser> OrganizerCandidates;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var organizerGroupId = Configuration.GetSection("AppSettings")["OrganizerGroupId"];
            var userPage = await GraphServiceClient.Groups[organizerGroupId].Members.Request().GetAsync();
            OrganizerCandidates = new List<AadUser>();
            var users = userPage
                .OfType<Microsoft.Graph.User>()
                .OrderBy(v => v.UserPrincipalName)
                .Select(v => new AadUser(v.UserPrincipalName, $"{v.DisplayName} ({Regex.Replace(v.UserPrincipalName, "@.*$", "")})"));
            OrganizerCandidates.AddRange(users);
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        EditingProject.OrganizerId = (await authenticationStateTask).User.Identity.Name;

        if(ProjectId != null)
        {
            EditingProject = await CosmosClient
                .GetDatabase("ProjectsDB")
                .GetContainer("ProwoContext")
                .ReadItemAsync<Project>(ProjectId, new PartitionKey(ProjectId));
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        var dbProject = new DbProject
        {
            Id = Guid.NewGuid(),
            Title = EditingProject.Title,
            Description = EditingProject.Description,
            Location = EditingProject.Location,
            OrganizerId = EditingProject.OrganizerId,
            Date = DateOnly.FromDateTime(EditingProject.Date),
            StartTime = TimeOnly.FromDateTime(EditingProject.StartTime),
            EndTime = TimeOnly.FromDateTime(EditingProject.EndTime),
            MaxParticipants = EditingProject.MaxParticipants
        };
        await CosmosClient
            .GetDatabase("ProjectsDB")
            .GetContainer("ProwoContext")
            .CreateItemAsync(dbProject, new PartitionKey(dbProject.Id.ToString()));
    }

    public record AadUser(
        string UserPrincipalName,
        string DisplayName
    );

    public class Project
    {
        [Required]
        public string Title { get; set; }
        public string Description { get; set; }
        [Required]
        public string Location { get; set; }
        [Required]
        public string OrganizerId { get; set; }
        public DateTime Date { get; set; } = DateTime.Today;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Maximale Anzahl an Teilnehmer muss mindestens 1 sein.")]
        public int MaxParticipants { get; set; } = 10;
    }

    [JsonObject(NamingStrategyType = typeof(CamelCaseNamingStrategy))]
    public class DbProject
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Location { get; set; }
        public string OrganizerId { get; set; }
        public DateOnly Date { get; set; }
        public TimeOnly StartTime { get; set; }
        public TimeOnly EndTime { get; set; }
        public int MaxParticipants { get; set; }
    }
}
