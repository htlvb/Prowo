@page "/projects/edit/{projectId?}"

@using Microsoft.Extensions.Configuration
@using Microsoft.Graph
@using Microsoft.Identity.Web
@using Prowo.BlazorServer.Database
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

@inject IConfiguration Configuration
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject Db Db

<h2>Projekt bearbeiten</h2>

<EditForm Model=@EditingProject OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="title">Titel: </label>
        <InputText @bind-Value=EditingProject.Title id="title" />
    </div>

    <div class="form-group">
        <label for="description">Beschreibung: </label>
        <InputTextArea @bind-Value=EditingProject.Description id="description" />
    </div>

    <div class="form-group">
        <label for="location">Ort: </label>
        <InputText @bind-Value=EditingProject.Location id="location" />
    </div>
    
    <AuthorizeView Context="Auth" Roles="Project.Write.All">
        <Authorized>
            <div class="form-group">
                <label for="organizer-id">Organisator: </label>
                <InputSelect @bind-Value=EditingProject.OrganizerId id="organizer-id">
                @if (OrganizerCandidates == null)
                {
                    <option value="">Personen werden geladen...</option>
                }
                else
                {
                    @foreach (var person in OrganizerCandidates)
                    {
                        <option value=@person.UserPrincipalName>@person.DisplayName</option>
                    }
                }
                </InputSelect>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="form-group">
                Organisator: @EditingProject.OrganizerId
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="form-group">
        <label for="co-organizer-ids">Betreuer: </label>
        <InputSelect @bind-Value=EditingProject.CoOrganizerIds id="co-organizer-ids">
        @if (OrganizerCandidates == null)
        {
            <option value="">Personen werden geladen...</option>
        }
        else
        {
            @foreach (var person in OrganizerCandidates)
            {
                <option value=@person.UserPrincipalName>@person.DisplayName</option>
            }
        }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="max-participants">Maximale Anzahl der Teilnehmer: </label>
        <InputNumber @bind-Value=EditingProject.MaxParticipants ParsingErrorMessage="Keine gültige Zahl" id="max-participants" />
    </div>

    <div class="form-group">
        <label for="date">Datum: </label>
        <InputDate @bind-Value=EditingProject.Date ParsingErrorMessage="Kein gültiges Datum" id="date" />
    </div>

    <div class="form-group">
        <label for="start-time">Von: </label>
        <input type="time" @bind=EditingProject.StartTime ParsingErrorMessage="Keine gültige Startzeit" id="start-time" />
    </div>

    <div class="form-group">
        <InputCheckbox @bind-Value=EditingProject.HasEndTime id="has-end-time" />
        <label for="has-end-time">Bis: </label>
        <input type="time" @bind=EditingProject.EndTime ParsingErrorMessage="Keine gültige Endzeit" disabled=@(!EditingProject.HasEndTime) />
    </div>

    <ValidationSummary />

    <input type="submit" value="Projekt anlegen" class="btn btn-primary"/>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    private Project EditingProject = new();
    private List<AadUser> OrganizerCandidates;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        try
        {
            var organizerGroupId = Configuration.GetSection("AppSettings")["OrganizerGroupId"];
            var userPage = await GraphServiceClient.Groups[organizerGroupId].Members.Request().GetAsync();
            OrganizerCandidates = new List<AadUser>();
            var users = userPage
                .OfType<Microsoft.Graph.User>()
                .OrderBy(v => v.UserPrincipalName)
                .Select(v => new AadUser(v.UserPrincipalName, $"{v.DisplayName} ({Regex.Replace(v.UserPrincipalName, "@.*$", "")})"));
            OrganizerCandidates.AddRange(users);
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        EditingProject.OrganizerId = authState.User.Identity.Name;

        if(ProjectId != null)
        {
            var dbProject = await Db.GetProject(ProjectId);
            EditingProject = Project.FromDbProject(dbProject);
        }
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        var dbProject = EditingProject.ToDbProject();
        await Db.CreateProject(dbProject);
        // TODO show success/error message
    }

    public record AadUser(
        string UserPrincipalName,
        string DisplayName
    );

    public class Project
    {
        [Required]
        public string Title { get; set; }
        public string Description { get; set; }
        [Required]
        public string Location { get; set; }
        [Required]
        public string OrganizerId { get; set; }
        public string[] CoOrganizerIds { get; set; } = Array.Empty<string>();
        public DateTime Date { get; set; } = DateTime.Today;
        public DateTime StartTime { get; set; }
        public bool HasEndTime { get; set; }
        public DateTime EndTime { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Maximale Anzahl an Teilnehmer muss mindestens 1 sein.")]
        public int MaxParticipants { get; set; } = 10;

        public static Project FromDbProject(DbProject dbProject)
        {
            return new Project
            {
                Title = dbProject.Title,
                Description = dbProject.Description,
                Location = dbProject.Location,
                OrganizerId = dbProject.OrganizerId,
                CoOrganizerIds = dbProject.CoOrganizerIds,
                Date = dbProject.Date.ToDateTime(TimeOnly.MinValue),
                StartTime = dbProject.Date.ToDateTime(dbProject.StartTime),
                HasEndTime = dbProject.EndTime.HasValue,
                EndTime = dbProject.Date.ToDateTime(dbProject.EndTime.GetValueOrDefault(TimeOnly.MinValue)),
                MaxParticipants = dbProject.MaxParticipants
            };
        }

        public DbProject ToDbProject()
        {
            return new DbProject
            {
                Id = Guid.NewGuid(),
                Title = Title,
                Description = Description,
                Location = Location,
                OrganizerId = OrganizerId,
                CoOrganizerIds = CoOrganizerIds,
                Date = DateOnly.FromDateTime(Date),
                StartTime = TimeOnly.FromDateTime(StartTime),
                EndTime = (HasEndTime ? TimeOnly.FromDateTime(EndTime) : null),
                MaxParticipants = MaxParticipants
            };
        }
    }
}
