@page "/projects"

@using Prowo.BlazorServer.Data
@using System.Globalization

@inject ProjectStore ProjectStore
@inject UserStore UserStore

<h2 class="text-2xl mb-2">Projekte</h2>
@if (projects == null)
{
    <p><em>Projekte werden geladen...</em></p>
}
else
{
    <div class="grid gap-4">
        <AuthorizeView Roles="Project.Write">
            <NavLink class="border-l-2 border-gray-400 hover:border-blue-500 rounded shadow p-2" href="projects/new">
                <span class="text-4xl text-black align-middle">+</span>
                <span class="text-xl text-black align-middle">Neues Projekt anlegen</span>
            </NavLink>
        </AuthorizeView>
        @foreach (var project in Enumerable.Repeat(projects, 3).SelectMany(v => v))
        {
            var location = $"projects/edit/{project.Id}";
            <div class="border-l-2 border-gray-400 hover:border-blue-500 rounded shadow">
                <div class="flex divide-x">
                    <div class="flex flex-col p-2">
                        <span class="text-xl text-black">@project.Title</span>
                        <span class="text-sm text-gray-600">@project.OrganizerName</span>
                        <span class="text-sm text-gray-600">@project.Date.ToLongDateString() | @project.StartTime @if (project.EndTime.HasValue) { <span> - @project.EndTime</span> }</span>
                    </div>
                    <div>
                        <pre class="text-sm font-sans p-2" style="font-family: inherit">
                            @project.Description
                        </pre>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Project> projects;

    protected override async Task OnInitializedAsync()
    {
        var users = await UserStore.GetOrganizerCandidates().ToList();
        var userLookup = users.ToDictionary(v => v.Id);
        projects = await ProjectStore.GetAll()
            .Select(v => Project.FromDbProject(v, userLookup))
            .ToList();
    }

    public record Project(
        string Id,
        string Title,
        string Description,
        string OrganizerName,
        DateOnly Date,
        TimeOnly StartTime,
        TimeOnly? EndTime
    )
    {
        public static Project FromDbProject(DbProject dbProject, IReadOnlyDictionary<string, DbUser> users)
        {
            return new(
                dbProject.Id,
                dbProject.Title,
                dbProject.Description,
                users.TryGetValue(dbProject.OrganizerId, out var organizer) ? organizer.DisplayName : "",
                DateOnly.ParseExact(dbProject.Date, "d", CultureInfo.InvariantCulture),
                TimeOnly.ParseExact(dbProject.StartTime, "HH:mm", CultureInfo.InvariantCulture),
                dbProject.EndTime == null ? null : TimeOnly.ParseExact(dbProject.EndTime, "HH:mm", CultureInfo.InvariantCulture)
            );
        }
    }
}